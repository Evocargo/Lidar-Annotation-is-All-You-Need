import numpy as np
from torch.utils.data import DataLoader, WeightedRandomSampler
from prefetch_generator import BackgroundGenerator


class WeightedDataLoader(DataLoader):
    """Loader supporting dataset-wise weights to mix them in some proportion

    Overwritten torch.utils.data.DataLoader class with weighted over
    datasets batch generation functionality. Class works only with ConcatDataset
    class. The syntax is the same as default DataLoader.

    Note:
        Data will always be shuffled.

    Example:
        from torch.utils.data import ConcatDataset
        concat_dataset = ConcatDataset((dataset1, dataset2))
        loader = WeightedDataLoader(
            concat_dataset,
            (3, 8),
            batch_size=5,
            num_workers=4,
        )
    """

    def __init__(
        self,
        dataset,
        weights,
        num_samples = None,
        batch_size = 1,
        num_workers = 0,
        **kwargs,
    ):
        """
        Args:
            dataset: ConcatDataset to sample from
            weights: weight for each sub-dataset from `dataset.datasets`
            num_samples: overall number of samples generated by this loader (sum of all batches)

            The rest match original `DataLoader` class
        """
        self.dataset = dataset
        self.weights = weights
        self.num_samples = num_samples or len(self.dataset)
        weighted_sampler = WeightedRandomSampler(self.sample_weights, self.num_samples)
        super().__init__(
            dataset,
            batch_size,
            sampler=weighted_sampler,
            num_workers=num_workers,
            **kwargs,
        )

    @property
    def sample_weights(self):
        """Creates weights to sample from dataset"""
        sample_weights = np.empty(len(self.dataset))
        start_ind = 0

        for weight, end_ind, dataset in zip(
            self.weights, self.dataset.cumulative_sizes, self.dataset.datasets
        ):
            sample_weights[start_ind:end_ind] = weight / len(dataset)
            start_ind = end_ind

        return sample_weights


class DataLoaderX(DataLoader):
    """prefetch dataloader"""
    def __iter__(self):
        return BackgroundGenerator(super().__iter__())